{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WaitQueueTimeoutError = exports.PoolClearedError = exports.PoolClosedError = void 0;\n\nconst error_1 = require(\"../error\");\n/**\n * An error indicating a connection pool is closed\n * @category Error\n */\n\n\nclass PoolClosedError extends error_1.MongoDriverError {\n  constructor(pool) {\n    super('Attempted to check out a connection from closed connection pool');\n    this.address = pool.address;\n  }\n\n  get name() {\n    return 'MongoPoolClosedError';\n  }\n\n}\n\nexports.PoolClosedError = PoolClosedError;\n/**\n * An error indicating a connection pool is currently paused\n * @category Error\n */\n\nclass PoolClearedError extends error_1.MongoNetworkError {\n  constructor(pool) {\n    // TODO(NODE-3135): pass in original pool-clearing error and use in message\n    // \"failed with: <original error which cleared the pool>\"\n    super(`Connection pool for ${pool.address} was cleared because another operation failed`);\n    this.address = pool.address;\n  }\n\n  get name() {\n    return 'MongoPoolClearedError';\n  }\n\n}\n\nexports.PoolClearedError = PoolClearedError;\n/**\n * An error thrown when a request to check out a connection times out\n * @category Error\n */\n\nclass WaitQueueTimeoutError extends error_1.MongoDriverError {\n  constructor(message, address) {\n    super(message);\n    this.address = address;\n  }\n\n  get name() {\n    return 'MongoWaitQueueTimeoutError';\n  }\n\n}\n\nexports.WaitQueueTimeoutError = WaitQueueTimeoutError;","map":{"version":3,"mappings":";;;;;;;AAAA;AAGA;;;;;;AAIA,MAAaA,eAAb,SAAqCC,wBAArC,CAAqD;EAInDC,YAAYC,IAAZ,EAAgC;IAC9B,MAAM,iEAAN;IACA,KAAKC,OAAL,GAAeD,IAAI,CAACC,OAApB;EACD;;EAEgB,IAAJC,IAAI;IACf,OAAO,sBAAP;EACD;;AAXkD;;AAArDC;AAcA;;;;;AAIA,MAAaC,gBAAb,SAAsCN,yBAAtC,CAAuD;EAIrDC,YAAYC,IAAZ,EAAgC;IAC9B;IACA;IACA,MAAM,uBAAuBA,IAAI,CAACC,OAAO,+CAAzC;IACA,KAAKA,OAAL,GAAeD,IAAI,CAACC,OAApB;EACD;;EAEgB,IAAJC,IAAI;IACf,OAAO,uBAAP;EACD;;AAboD;;AAAvDC;AAgBA;;;;;AAIA,MAAaE,qBAAb,SAA2CP,wBAA3C,CAA2D;EAIzDC,YAAYO,OAAZ,EAA6BL,OAA7B,EAA4C;IAC1C,MAAMK,OAAN;IACA,KAAKL,OAAL,GAAeA,OAAf;EACD;;EAEgB,IAAJC,IAAI;IACf,OAAO,4BAAP;EACD;;AAXwD;;AAA3DC","names":["PoolClosedError","error_1","constructor","pool","address","name","exports","PoolClearedError","WaitQueueTimeoutError","message"],"sources":["/Users/drewl/Projects/mwpTutor/tutor/node_modules/mongodb/src/cmap/errors.ts"],"sourcesContent":["import { MongoDriverError, MongoNetworkError } from '../error';\nimport type { ConnectionPool } from './connection_pool';\n\n/**\n * An error indicating a connection pool is closed\n * @category Error\n */\nexport class PoolClosedError extends MongoDriverError {\n  /** The address of the connection pool */\n  address: string;\n\n  constructor(pool: ConnectionPool) {\n    super('Attempted to check out a connection from closed connection pool');\n    this.address = pool.address;\n  }\n\n  override get name(): string {\n    return 'MongoPoolClosedError';\n  }\n}\n\n/**\n * An error indicating a connection pool is currently paused\n * @category Error\n */\nexport class PoolClearedError extends MongoNetworkError {\n  /** The address of the connection pool */\n  address: string;\n\n  constructor(pool: ConnectionPool) {\n    // TODO(NODE-3135): pass in original pool-clearing error and use in message\n    // \"failed with: <original error which cleared the pool>\"\n    super(`Connection pool for ${pool.address} was cleared because another operation failed`);\n    this.address = pool.address;\n  }\n\n  override get name(): string {\n    return 'MongoPoolClearedError';\n  }\n}\n\n/**\n * An error thrown when a request to check out a connection times out\n * @category Error\n */\nexport class WaitQueueTimeoutError extends MongoDriverError {\n  /** The address of the connection pool */\n  address: string;\n\n  constructor(message: string, address: string) {\n    super(message);\n    this.address = address;\n  }\n\n  override get name(): string {\n    return 'MongoWaitQueueTimeoutError';\n  }\n}\n"]},"metadata":{},"sourceType":"script"}